import { getUserScores } from "../js/link.js";

// START
window.onload = function initialize(){    
    populateLeaderboard();
}

/**
 * Gets the list of user scores, sorts it, and displays it on the page
 */
async function populateLeaderboard() {
    // Get all user scores
    let user_scores = await findUserScores();
    if (user_scores == null) {
        console.error("User scores could not be retrieved");
        return;
    }
        
    // Sort list of scores
    sortUserScores(user_scores);

    // Display scores onto leaderboard
    displayUserScores(user_scores);
}

/**
 * Parses the valid `iso_string` and returns a Date object, because new Date() in Safari
 * is incapable of handling a string generated by Date.toISOString 
 */
function parseISOString(iso_string) {
  var parts = iso_string.split(/[-T:.Z]/);
  return new Date(Date.UTC(parts[0], --parts[1], parts[2], parts[3], parts[4], parts[5], parts[6]));
}

/**
 * Attempts to find the user scores in session storage, and if that fails, requests them
 * from the backend
 */
async function findUserScores() {
    // Get raw list of names and koroks from session storage
    let user_scores = JSON.parse(sessionStorage.getItem("user_scores"));
    const scores_expiration_date = sessionStorage.getItem("scores_expiration_date");

    // If they don't exist in session storage, request them from the backend
    if (user_scores == null  ||  scores_expiration_date < Date.now()) {
        // Get list from server
        user_scores = await getUserScores();
        // Check if the scores were returned
        if (user_scores == null) {
            return null;
        }
        // Save it to the session storage, and set it to expire in 1 minute
        sessionStorage.setItem("user_scores", JSON.stringify(user_scores));
        sessionStorage.setItem("scores_expiration_date", Date.now() + 1*60000);
    }

    return user_scores;
}

/**
 * Sorts the `user_scores` based on their Korok count and time of last scans
 * The sorted list is displayed on the leaderboard
 */
function sortUserScores( user_scores ) {
    user_scores.sort( function(a, b) {
        // Compare the two scores
        if (b.korok_count != a.korok_count) {
            return b.korok_count - a.korok_count;
        }
        // If the scores are equal, then rank the player which has found a Korok the earliest higher
        else {
            try {
                const a_time_of_last_scan = parseISOString(a.time_of_last_scan);
                const b_time_of_last_scan = parseISOString(b.time_of_last_scan);
                return a_time_of_last_scan.getTime() - b_time_of_last_scan.getTime();
            } catch (e) {
                // Just sort randomly if time_of_last_scane is not found
                return 1;
            }
        }
    });
}

/**
 * Displays the `user_scores` in order on the page
 */
function displayUserScores(user_scores) {
    // Change nothing if there are no users
    if(user_scores == null || user_scores.length == 0) {
        return;
    }

    let leaderboard = document.getElementById("leaderboard");
    const leaderboard_element = leaderboard.getElementsByClassName("leaderboard_item")[0];

    for (let i = 0; i < user_scores.length; i++) {
        // Copy leaderboard element and add values to it
        let new_leaderboard_element = leaderboard_element.cloneNode(true);
        new_leaderboard_element.getElementsByTagName("rank")[0].textContent = i+1 + '.';
        new_leaderboard_element.getElementsByTagName("username")[0].textContent = user_scores[i].username;

        let time_of_last_scan = parseISOString(user_scores[i].time_of_last_scan).toDateString();
        if (time_of_last_scan == "Invalid Date") {
            time_of_last_scan = "???";
        } else {
            // Slice off the year
            time_of_last_scan = time_of_last_scan.slice(0, -5);
        }
        new_leaderboard_element.getElementsByTagName("last_active")[0].textContent = "Last Korok: " + time_of_last_scan;

        let count_string = user_scores[i].korok_count + " Korok";
        if (user_scores[i].korok_count != 1) {
            count_string += 's';
        }
        new_leaderboard_element.getElementsByTagName("count")[0].textContent = count_string;

        // Append new element to the end of the leaderboard
        leaderboard.appendChild(new_leaderboard_element);
    }

    // Remove the first element
    leaderboard.removeChild(leaderboard_element);
}